@inject IDeleteInventoryUseCase DeleteInventoryUseCase
@inject NavigationManager NavigationManager

<tr>
    <td>@Inventory.InventoryName</td>
    <td>@Inventory.Quantity</td>
    <td>@Inventory.Price.ToString("c")</td>
    <td>
        <a href="/editinventory/@Inventory.InventoryId"
           class="btn btn-light">
            Edit
        </a>
    </td>
    <td>
        <EditForm Enhance="true" Model="Inventory"
                  FormName="@($"form-delete-inventory-{Inventory.InventoryId}")"
                  OnValidSubmit="() => DeleteInventory(Inventory.InventoryId)">
            <button type="submit" class="btn btn-light">Delete</button>
        </EditForm>
    </td>
</tr>


@code {

    [Parameter]
    public Inventory? Inventory { get; set; }


    private async Task DeleteInventory(int inventoryId)
    {
        await DeleteInventoryUseCase.ExecuteAsync(inventoryId);
        NavigationManager.Refresh();
    }

}